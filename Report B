# Import necessary libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score
from scipy.stats import spearmanr, pearsonr, ks_2samp, chi2_contingency
from sklearn.preprocessing import LabelEncoder

# Step 1: Load the dataset
from google.colab import files
uploaded = files.upload()

# Load the dataset into a DataFrame
for file_name in uploaded.keys():
    df = pd.read_csv(file_name)

# Step 2: Descriptive Statistics
print("Descriptive Statistics:")
print(df.describe())  # Descriptive statistics for numerical columns
print("\nCategorical Data Unique Values:")
for col in df.select_dtypes(include=['object']).columns:
    print(f"{col}: {df[col].unique()}")  # Unique values for categorical columns

# Step 3: Relationships Between Continuous Data
continuous_columns = ['math score', 'reading score', 'writing score']

# Scatter plots and linear regression
for i in range(len(continuous_columns)):
    for j in range(i + 1, len(continuous_columns)):
        x = df[continuous_columns[i]]
        y = df[continuous_columns[j]]

        # Scatter plot
        plt.figure(figsize=(10, 6))
        sns.scatterplot(x=x, y=y)
        plt.title(f'Scatter Plot: {continuous_columns[i]} vs {continuous_columns[j]}')
        plt.xlabel(continuous_columns[i])
        plt.ylabel(continuous_columns[j])
        plt.axhline(y=y.mean(), color='r', linestyle='--', label='Mean')
        plt.axvline(x=x.mean(), color='g', linestyle='--', label='Mean')
        plt.legend()
        plt.tight_layout()
        plt.show()

        # Linear regression
        model = LinearRegression()
        X = x.values.reshape(-1, 1)
        model.fit(X, y)
        y_pred = model.predict(X)

        plt.figure(figsize=(10, 6))
        sns.scatterplot(x=x, y=y)
        plt.plot(x, y_pred, color='red', label='Linear Regression')
        plt.title(f'Linear Regression: {continuous_columns[i]} vs {continuous_columns[j]}')
        plt.xlabel(continuous_columns[i])
        plt.ylabel(continuous_columns[j])
        plt.legend()
        plt.tight_layout()
        plt.show()

        # Calculate Pearson and Spearman correlation
        pearson_corr, _ = pearsonr(x, y)
        spearman_corr, _ = spearmanr(x, y)
        print(f'Pearson R: {pearson_corr:.4f}, Spearman R: {spearman_corr:.4f} for {continuous_columns[i]} vs {continuous_columns[j]}')

# Step 4: Relationships Between Parental Education and Scores
# Encode parental level of education as numerical
le = LabelEncoder()
df['parental_level_encoded'] = le.fit_transform(df['parental level of education'])

# Calculate correlations for math, reading, and writing scores
for score in ['math score', 'reading score', 'writing score']:
    r_pearson, _ = pearsonr(df['parental_level_encoded'], df[score])
    r_spearman, _ = spearmanr(df['parental_level_encoded'], df[score])
    print(f"Parental Education vs {score}:")
    print(f"  Pearson R: {r_pearson:.4f}")
    print(f"  Spearman R: {r_spearman:.4f}\n")

# Step 5: Chi-Squared Test for Categorical Relationships
categorical_columns = ['lunch', 'race/ethnicity', 'parental level of education']

for cat_col in categorical_columns:
    contingency_table = pd.crosstab(df[cat_col], df['math score'].apply(lambda x: 'Pass' if x >= 60 else 'Fail'))
    chi2, p, dof, expected = chi2_contingency(contingency_table)
    print(f"Chi-Squared Test for {cat_col} vs Math Score:")
    print(f"Chi-Squared: {chi2:.4f}, P-Value: {p:.4f}\n")

# Step 6: Machine Learning - Predicting Math Scores
# Prepare data for modeling
X = pd.get_dummies(df.drop(['math score', 'reading score', 'writing score'], axis=1), drop_first=True)
y = df['math score']

# Split the data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Fit the model
model = LinearRegression()
model.fit(X_train, y_train)

# Predictions
y_pred = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Math Model - Mean Squared Error: {mse:.4f}")
print(f"Math Model - R-squared Score: {r2:.4f}")

# Repeat the modeling for reading and writing scores if needed
